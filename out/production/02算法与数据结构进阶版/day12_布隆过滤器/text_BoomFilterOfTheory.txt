布隆过滤器的本质是什么？原理、适用场景介绍

##概述
布隆过滤器从字面的意思理解就是一种过滤器，用于过滤无效的操作，提升系统性能和效率。

官方的说明，布隆过滤器是一种概率性数据结构（probabilistic data structure），支持高速的插入和查询，并且具有数据保密性、占用空间小的优点。

布隆过滤器的作用可以确定数据肯定不存在，但是不能确定数据肯定存在，也就是判断数据存在性方面具有一定的误差。

##布隆过滤器实现原理
布隆过滤器是具有m个bit位的数组，每一个bit位初始化为0。插入一个元素时，将此元素流入k个哈希函数，获取k个bit数组的位置，设置为1.查询一个元素时，也将此元素流入k个哈希函数，获取k个bit数组的位置，如果所有的位置都为1，则此元素存在，反之此元素不存在。但是误报率，就是某个查询元素的所对应的所有的位置都为1，但是该元素也可能不存在集合中。

举例，由一个m=8bit位长的数组，k=3个哈希函数组成的布隆过滤器，插入一个元素“苹果”。


插入元素“苹果”

再插入一个元素“香蕉”：


插入元素“香蕉”

当进行“桃子”查询时，也许发生一些差错，如下图所示，“桃子”元素明明没有插入，但是查询时确是存在的，这就是布隆过滤器的存在的概率性错误。


查询元素“桃子”

从上面的例子可以看出，插入的元素都映射为0或1，隐藏了原有真实的数据，保护了数据隐私。另一方面把原有数据的存储量变为3个bit位，

降低了内存空间使用量。以误差率在0.01%，数据量从1亿条到9亿条，每条的平均大小递增，如下图所示，每条的平均大小越大，空间的节省越大。


##布隆过滤器相关参数计算图

根据上面的描述，可以看到布隆过滤器有四个参数，一个是k为哈希函数个数，m 为布隆过滤器长度，n为插入的元素个数（一般数据量要大，否则意义不大），

p为误报率（根据业务需求确定），他们之间存在一个公式（前人总结，数学证明过程略）：


m,k计算公式

其中n插入数据量，和p误报率是人为确定的，如何确定n和p呢？

在数据量小，平均每条记录占用空间小的情况下，使用HashMap等数据结构就完全可以胜任业务要求。因此只有在数据量大，比如过亿数据记录，内存空间占用量大，而且容忍部分误差率的情况下才可以使用布隆过滤器，具体量化的数据没有经过测算，只是一个非量化的分析。不过大家可以从下面布隆过滤器的适应场景中找到更好的参考和样本。

利用公式计算所得，p=0.01%时，m和n的最佳比例在19左右。

##适用场景

有些系统存在很多穿透到后端的空查询，由于后端查询占用资源较多，如CPU或者IO读写，严重影响系统的性能，此时如果能够有效的拦截空查询或无效查询，

将大大提高系统的性能。如OceanBase数据库采用布隆过滤器，加速对空查询的过滤，提升了insert 的性能。

以及网页URL 去重、垃圾邮件识别、黑名单、查询加速【比如基于KV结构的数据】、集合元素重复的判断、缓存穿透（缓存和数据库中都没有查询数据）等场景，

也是布隆过滤器的理想使用之地。

在很多KV数据库中也采用布隆过滤器来过滤空查询或无效查询，如 Hbase，Accumulo，Bigtable，Leveldb等。KV数据持久化到磁盘，

每一次访问都需要消耗IO读写操作，如果存在大量的无效查询将导致性能的损失，为了保持只允许有效的查询才能够到磁盘访问，

采用布隆过滤器是一个常用的选择。当然采用布隆过滤器会增加内存的消耗，以及对于有效查询的微量延迟。

KV数据库中布隆过滤器的典型应用场景（减少IO操作，提升性能）

##缺点
不能删除元素，但是有些改进的算法支持，如Counting Bloom filter。

可直接使用的实现

Guava工具包



Java利益Guava实现布隆过滤器

Redis Bitmaps



Redisson实现布隆过滤器

##延伸学习
概率性数据结构
一般采用哈希函数（Hash function）来随机化并紧凑地表示一个项的集合。忽略掉碰撞（Collision）的情况，但错误可以在一定的阈值下得到很好的控制。与无错方法相比，这些算法使用的内存更少，并且具有常数级的查询时间复杂度。

概率性数据结构包括：布隆过滤器（Bloom filter）、基数估计法（HyperLogLog）、最小略图（Count-Min sketch）、布谷过滤器(cuckoo fliter)、T-Digest等。

